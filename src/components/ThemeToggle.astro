---
// No server-side logic needed for this component
---

<button
  id="themeToggle"
  class="h-10 w-10 p-1 rounded-full border border-border-subtle hover:bg-opacity-50 focus:outline-none focus:ring-2 focus:ring-offset-2 flex items-center justify-center transition-all duration-200 hover:scale-110 hover:bg-bg-gradient-end hover:border-primary"
  aria-label="Toggle theme"
>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    class="h-6 w-6"
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
    stroke-width="2"
  >
    <!-- Sun icon -->
    <path
      class="sun block dark:hidden"
      stroke-linecap="round"
      stroke-linejoin="round"
      d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
    ></path>
    <!-- Moon icon -->
    <path
      class="moon hidden dark:block"
      stroke-linecap="round"
      stroke-linejoin="round"
      d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
    ></path>
  </svg>
</button>

<script is:inline>
  const theme = (() => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
      return "dark";
    }
    return "light";
  })();

  const applyTheme = (theme) => {
    if (theme === "light") {
      document.documentElement.classList.remove("dark");
    } else {
      document.documentElement.classList.add("dark");
    }
  };

  // Apply the theme on initial load
  applyTheme(theme);
  // Store the initially determined theme
  if (typeof localStorage !== "undefined") {
    localStorage.setItem("theme", theme);
  }

  const handleToggleClick = () => {
    console.log("Toggle clicked");
    const element = document.documentElement;
    element.classList.toggle("dark");

    const isDark = element.classList.contains("dark");
    localStorage.setItem("theme", isDark ? "dark" : "light");
  };

  // Function to re-apply theme and attach the event listener
  function setupThemeToggle() {
    // Re-determine the current theme preference from localStorage
    const currentTheme =
      localStorage.getItem("theme") ||
      (window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light");

    // Re-apply the theme class to html element
    applyTheme(currentTheme);

    // Attach the click listener
    const themeToggleButton = document.getElementById("themeToggle");
    if (themeToggleButton) {
      themeToggleButton.removeEventListener("click", handleToggleClick); // Prevent duplicates
      themeToggleButton.addEventListener("click", handleToggleClick);
    }
  }

  // Run setup on initial load
  setupThemeToggle();

  // Run setup after view transitions
  document.addEventListener("astro:after-swap", setupThemeToggle);
</script>
